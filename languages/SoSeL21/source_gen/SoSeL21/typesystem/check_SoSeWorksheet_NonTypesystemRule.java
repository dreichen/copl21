package SoSeL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_SoSeWorksheet_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SoSeWorksheet_NonTypesystemRule() {
  }
  public void applyRule(final SNode sw, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<SNode> refs = SLinkOperations.collect(SNodeOperations.ofConcept(SLinkOperations.getChildren(sw, LINKS.contents$sbkK), CONCEPTS.Reference$8g), LINKS.definition$WmVE);
    if (Sequence.fromIterable(refs).distinct().count() != Sequence.fromIterable(refs).count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(sw, "Only one ref to each variable possible!", "r:d10b675c-ca74-4ba5-a038-cf9df5c46fc1(SoSeL21.typesystem)", "6844863898947697231", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.SoSeWorksheet$NT;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink contents$sbkK = MetaAdapterFactory.getContainmentLink(0x7e642a5f6d9b49f5L, 0x815956089ac1a1e9L, 0x39bf3597a7eb9f75L, 0x39bf3597a7ee09dfL, "contents");
    /*package*/ static final SReferenceLink definition$WmVE = MetaAdapterFactory.getReferenceLink(0x7e642a5f6d9b49f5L, 0x815956089ac1a1e9L, 0x1b9b1aa24caa6fc6L, 0x5efdd77350aa6bbdL, "definition");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reference$8g = MetaAdapterFactory.getConcept(0x7e642a5f6d9b49f5L, 0x815956089ac1a1e9L, 0x1b9b1aa24caa6fc6L, "SoSeL21.structure.Reference");
    /*package*/ static final SConcept SoSeWorksheet$NT = MetaAdapterFactory.getConcept(0x7e642a5f6d9b49f5L, 0x815956089ac1a1e9L, 0x39bf3597a7eb9f75L, "SoSeL21.structure.SoSeWorksheet");
  }
}
